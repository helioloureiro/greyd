* Building RPM packages with docker

Using docker to build greyd RPMs is very convenient.

All commands are run in a checkout of the source directory.

** Build the centos 7 rpmbuild docker image

#+BEGIN_SRC bash
  docker build -t greyd-rpmbuild:centos7 \
         -f packages/docker/Dockerfile.rpmbuild.centos7 .
#+END_SRC

** Make an RPM

Build and RPM with the source in the current directory and output the results
to ~packages/rpm/~:

#+BEGIN_SRC bash
  docker run \
         -v `pwd`:/home/builder/source \
         greyd-rpmbuild:centos7
#+END_SRC

** Sign the RPMs before distribution

You first need to set the ~.rpmmacros~ appropriately, eg:

#+BEGIN_EXAMPLE
  %_topdir    /home/mikey/rpmbuild
  %_gpg_name  Mikey Austin <mikey@greyd.org>
  %_gpg_bin   /usr/bin/gpg2
#+END_EXAMPLE

Then you can sign the resulting RPM files:

#+BEGIN_SRC bash
  find packages/rpm/*.rpm -exec rpm --addsign {} \;
#+END_SRC

It's easier to sign the artifacts outside of the docker image so we
don't need to muck about with private keys and different versions of
gpg.

** Building the main greyd image

*** Centos 7 image

We make use of the above RPM distribution to simplify the the building
and installation of the docker image.

*** Building the image

From the root directory of the repository:

#+BEGIN_SRC bash
  docker build -t greyd:centos7 \
         -f packages/docker/Dockerfile.greyd.centos7 .
#+END_SRC

*** Running the image

You will probably want to mount your own configuration to
~/etc/greyd/greyd.conf~, or better yet build your own image
that does this and uses the greyd image as the base.

Below is an example of a typical run:

#+BEGIN_SRC bash
  docker run -P -p8025:8025 \
         -v ~/.greyd.conf:/etc/greyd/greyd.conf \
         greyd:centos7
#+END_SRC

Make sure that the ~bind_address~ is set to ~0.0.0.0~ in your configuration
or else the ports won't be accessible.
